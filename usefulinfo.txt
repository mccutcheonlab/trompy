# useful commands for maintaining trompy package

## Preparing for new pypi release
Commit changes to master Github repository with sensible commits (e.g. fixed bug in xxx)
Update __init__.py if any new functions to import
Update changelog.txt
Make changes to setup.py (version number, download link to release (to be made in next step), additional packages needed.
Commit changes to master Github using "Prep for vxxx" as commit
Make a new Release using exact name e.g. "v0.12.3-alpha" as used in setup.py


## For uploading new pypi release
1. Ensure that setup.py and __init__.py are up-to-date
2. Navigate to trompy folder and run: python setup.py sdist
3. twine upload dist/* ~~(need to enter pypi username and password)~~ (password in 1password)
(can try twine upload --skip-existing dist/*)

Now need to use token so format is as follows (with token stored in 1password)

twine upload -u __token__ -p pypi-xxx --skip-existing dist/* --verbose 


## To check new release

pip install --upgrade trompy

## To use pypitest



## For converting readme.md to readme.rst
pandoc --columns=100 --output=README.rst --to rst README.md


# How to write tests

## Release workflow (example PowerShell commands)

# 1) Bump version in trompy/_version.py to the next version (e.g. 0.15.8)
# Edit trompy/_version.py and update __version__ accordingly.

# 2) Commit changes and tag
git add trompy/_version.py setup.py CHANGELOG.md
git commit -m "Prep for v0.15.8"
git tag -a v0.15.8 -m "Release v0.15.8"
git push origin main --follow-tags

# 3) Build sdist (run from repo root)
cd trompy
python setup.py sdist

# 4) Upload to PyPI with token (store token securely; example shown)
twine upload -u __token__ -p pypi-XXX --skip-existing dist/* --verbose

# 5) Verify
pip install --upgrade trompy

